Plan of attack:

int buffersize = "size"; //size of file
semaphore access = 1; //provide mutual exclusion and access
semaphore full = 0; // prevent writing if full
semaphore empty = buffersize // amt of free space

Producer and consumer threads: 

	void producer(){
		while(TRUE){
			wait(empty);
				wait(access); //
					write_item();
					x = produce();
				signal(access);
			signal(full);
		}
	}

	void consumer(){
		while(TRUE){
			wait(full);
				wait(access);
					x = take_value();
					consume(x);
				signal(access);
			signal(empty);
		}
	}

int main(){
	begin(producer(), consumer());
}



pThreads and Mutex locks
	#include <pthread.h>
	pthread_mutex_t mutex;

	/* create a mutex lock */
	pthread_mutex_init(&mutex, NULL);

	/* acquire a mutex lock */
	pthread_mutex_init(&mutex);

	/* Critical section would go here */

	/* release a lock */
	pthread_mutex_unlock(&mutex);

Semaphores
	
	#include <semaphore.h>
	sem_t sem;

	/* init semaphore to 5 */
	sem_init(&sem, 0, 5)

	/* acquire the semaphore */
	sem_init(&mutex, 0, 1);

	/* critical section would go here */

	/* release the semaphore */
	sem_post(&mutex)